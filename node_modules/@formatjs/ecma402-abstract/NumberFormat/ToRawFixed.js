"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToRawFixed = ToRawFixed;
var tslib_1 = require("tslib");
var decimal_js_1 = tslib_1.__importDefault(require("decimal.js"));
var constants_1 = require("../constants");
var utils_1 = require("../utils");
var ApplyUnsignedRoundingMode_1 = require("./ApplyUnsignedRoundingMode");
decimal_js_1.default.set({
    toExpPos: 100,
});
function ToRawFixedFn(n, f) {
    return n.times(constants_1.TEN.pow(-f));
}
function findN1R1(x, f, roundingIncrement) {
    var nx = x.times(constants_1.TEN.pow(f)).floor();
    var n1 = nx.div(roundingIncrement).floor().times(roundingIncrement);
    var r1 = ToRawFixedFn(n1, f);
    return {
        n1: n1,
        r1: r1,
    };
}
function findN2R2(x, f, roundingIncrement) {
    var nx = x.times(constants_1.TEN.pow(f)).ceil();
    var n2 = nx.div(roundingIncrement).ceil().times(roundingIncrement);
    var r2 = ToRawFixedFn(n2, f);
    return {
        n2: n2,
        r2: r2,
    };
}
/**
 * TODO: dedup with intl-pluralrules and support BigInt
 * https://tc39.es/ecma402/#sec-torawfixed
 * @param x a finite non-negative Number or BigInt
 * @param minFraction and integer between 0 and 20
 * @param maxFraction and integer between 0 and 20
 */
function ToRawFixed(x, minFraction, maxFraction, roundingIncrement, unsignedRoundingMode) {
    var f = maxFraction;
    var _a = findN1R1(x, f, roundingIncrement), n1 = _a.n1, r1 = _a.r1;
    var _b = findN2R2(x, f, roundingIncrement), n2 = _b.n2, r2 = _b.r2;
    var r = (0, ApplyUnsignedRoundingMode_1.ApplyUnsignedRoundingMode)(x, r1, r2, unsignedRoundingMode);
    var n, xFinal;
    var m;
    if (r.eq(r1)) {
        n = n1;
        xFinal = r1;
    }
    else {
        n = n2;
        xFinal = r2;
    }
    if (n.isZero()) {
        m = '0';
    }
    else {
        m = n.toString();
    }
    var int;
    if (f !== 0) {
        var k = m.length;
        if (k <= f) {
            var z = (0, utils_1.repeat)('0', f - k + 1);
            m = z + m;
            k = f + 1;
        }
        var a = m.slice(0, k - f);
        var b = m.slice(m.length - f);
        m = a + '.' + b;
        int = a.length;
    }
    else {
        int = m.length;
    }
    var cut = maxFraction - minFraction;
    while (cut > 0 && m[m.length - 1] === '0') {
        m = m.slice(0, m.length - 1);
        cut--;
    }
    if (m[m.length - 1] === '\u002e') {
        m = m.slice(0, m.length - 1);
    }
    return {
        formattedString: m,
        roundedNumber: xFinal,
        integerDigitsCount: int,
        roundingMagnitude: -f,
    };
}
