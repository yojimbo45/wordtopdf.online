"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManifestParser = void 0;
var logger_js_1 = require("../logger.js");
var file_js_1 = require("../utils/file.js");
var fast_glob_1 = __importDefault(require("fast-glob"));
var ManifestParser = /** @class */ (function () {
    function ManifestParser(config, runtimePaths) {
        this.config = config;
        this.runtimePaths = runtimePaths;
    }
    /**
     * Return paths of html files if config.output = "export"
     * @param exportFolder
     * @returns
     */
    ManifestParser.prototype.getStaticExportPages = function (config, exportFolder) {
        return __awaiter(this, void 0, void 0, function () {
            var htmlFiles;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // Skip this step if config.output is not export mode
                        if ((config === null || config === void 0 ? void 0 : config.output) !== 'export') {
                            return [2 /*return*/, []];
                        }
                        return [4 /*yield*/, (0, fast_glob_1.default)("".concat(exportFolder, "/**/*.html"))
                            // Cleanup files
                        ];
                    case 1:
                        htmlFiles = _a.sent();
                        // Cleanup files
                        return [2 /*return*/, htmlFiles === null || htmlFiles === void 0 ? void 0 : htmlFiles.map(function (file) {
                                return file
                                    .replace(exportFolder, '')
                                    .replace('index', '')
                                    .replace('.html', '')
                                    .trim();
                            })];
                }
            });
        });
    };
    ManifestParser.prototype.loadManifest = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var buildManifest, preRenderManifest, routesManifest, staticExportPages;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, (0, file_js_1.loadJSON)(this.runtimePaths.BUILD_MANIFEST)
                        // Throw error if no build manifest exist
                    ];
                    case 1:
                        buildManifest = _b.sent();
                        // Throw error if no build manifest exist
                        if (((_a = this.config) === null || _a === void 0 ? void 0 : _a.output) !== 'export' && !buildManifest) {
                            throw logger_js_1.Logger.noBuildManifest();
                        }
                        return [4 /*yield*/, (0, file_js_1.loadJSON)(this.runtimePaths.PRERENDER_MANIFEST)
                            // Load routes manifest
                        ];
                    case 2:
                        preRenderManifest = _b.sent();
                        return [4 /*yield*/, (0, file_js_1.loadJSON)(this.runtimePaths.ROUTES_MANIFEST)
                            // Get static export path when output is set as "export"
                        ];
                    case 3:
                        routesManifest = _b.sent();
                        return [4 /*yield*/, this.getStaticExportPages(this.config, this.runtimePaths.STATIC_EXPORT_ROOT)];
                    case 4:
                        staticExportPages = _b.sent();
                        return [2 /*return*/, {
                                build: buildManifest !== null && buildManifest !== void 0 ? buildManifest : {},
                                preRender: preRenderManifest,
                                routes: routesManifest,
                                staticExportPages: staticExportPages,
                            }];
                }
            });
        });
    };
    return ManifestParser;
}());
exports.ManifestParser = ManifestParser;
